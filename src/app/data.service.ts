import { Injectable } from '@angular/core';import { SpinnerService } from './shared/spinner/spinner.service';interface IImages {  notProcessedImage: string;  processedImage: string;}interface IRandomImage extends IImages {  objects?: any;}@Injectable()export class DataService {  public pathImage = './assets/images/';  public carouselConfig = {    loop: true,    nav: false,    lazyLoad : true,    dots: false,    animateOut: 'fadeOut',    animateIn: 'fadeIn',    items: 8,    margin: 20,    autoplay: true,    autoplayTimeout: 2500,    smartSpeed: 1900  };  public images: IImages[];  public randomImage: IRandomImage;  constructor(    private spinner: SpinnerService  ) {}  uploadFile(event) {    const self = this;    const target: HTMLInputElement = <HTMLInputElement>event.target;    const file = target.files[target.files.length - 1];    this.spinner.start();    if (file) {      const reader = new FileReader();      const fileJSON = file.type.match('json');      if (fileJSON) {        reader.onload = function (e: any) {          self.images = JSON.parse(e.currentTarget.result);          self.spinner.stop(500);        };        reader.readAsBinaryString(file);      }    }  }  get getRandomImage() {    this.spinner.start();    const index = Math.floor(Math.random() * this.images.length) + 0;    this.randomImage = this.images[index];    this.randomImage.objects = [];    this.spinner.stop(1000);    return this.randomImage;  }  addProperties(prop, i, type) {    this.deactivated();    this.randomImage.objects[i].active = true;    this.randomImage.objects[i][type] = prop;  }  addObject() {    this.deactivated();    this.randomImage.objects.push({active: true});  }  clearAll() {    this.randomImage.objects = [];  }  clearLast() {    this.randomImage.objects.forEach((object, index) => {      if (object.active) {        this.randomImage.objects.splice(index, 1);      }    });  }  saveContact(contact) {    contact.date = new Date().toLocaleString();    let contactsArr = { data: [] };    const contacts = localStorage.getItem('contacts');    if (contacts) {      contactsArr = JSON.parse(contacts);    }    contactsArr.data.push(contact);    localStorage.setItem('contacts', JSON.stringify(contactsArr));  }  sendTo() {    const fileName = 'contacts';    const contacts = localStorage.getItem('contacts');    if (contacts) {      let contactsString = '';      JSON.parse(contacts).data.forEach(contact => {        contactsString += `${contact.company} ${contact.email} ${contact.date}\r\n`;      });      const pp = document.createElement('a');      pp.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(contactsString));      pp.setAttribute('download', fileName);      pp.click();    }  }  deactivated() {    this.randomImage.objects.forEach(object => {      object.active = false;    });  }}